c
friend
c
user.signed_id
user.signed_in?
user.signed_in
user.sign_in
user
c
user.signed_id
user.signed_if
user.sign_in?
current_user
user.sign_in?
user
c
friend
assigns(:friend)
expect(assigns(:friend)).to eq friend
c
friend
expect(response)
expect(response).to render_template(:show)
c
friend
c
create(:friend)
let!(:friend) { create(:friend) }
:friend
friend
c
friend.id
user.id
c
expect(response)
have_http_status(:success)
c
friends
friend
c
user.friends
user
friends
c
friend1
friend`
c
friend1
friend
c
friend
c
friends
c
expect(assigns(:friends)).to eq user.friends
c
friends
c
expect(assigns(:friends)).to eq user.friends
expect(response).to render_template(:index)
n
response
c
FactoryBot.create(:user)
user
c
FactoryBot.create(:user)
c
FactoryBot.create(:user)
user
c
user
FactoryBot.create_list(:friend, user, 5)
friendlist
c
friendlist
c
friendlist
c
friendlist
c
friendlist
c
friendlist
c
friendlist
c
C
user
friendlist
expect(response).to redirect_to(friend)
[200~expect(response).to redirect_to(friend)~
response.status
response.data
response
c
get :show, params: { id: friend.id }
friend
c
friend
c
friend
c
random_friend
c
random_friend
friend
c
friend
c
friend
c
friend
c
friend
c
friend
c
friend
	c
friend
c
let(:friend){ build(:user) }
c
let(:friend)
:friend
let(:friend){ build(:user) }
build(:user)
:user
user
:user
c
avatar.variant(resize: '150x150').processed
avatar
c
@friend
c
@friend
c
@friend
c
render_html_table
c
@friend
c
@friend.first_name
c
@friend.first_name
c
@friend.first_name
c
@friend
c
@friend
c
render_html_table
c
render_html_table
c
render_html_table
c
render_html_table
byebug
c
render_html_table
c
render_html_table
c
render_html_table
        debugger;
c
q
@friends
