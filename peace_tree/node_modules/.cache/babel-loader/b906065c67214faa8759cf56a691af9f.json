{"ast":null,"code":"/*!\n * FilePondPluginFilePoster 2.5.1\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginFilePoster = factory());\n})(this, function () {\n  'use strict';\n\n  var IMAGE_SCALE_SPRING_PROPS = {\n    type: 'spring',\n    stiffness: 0.5,\n    damping: 0.45,\n    mass: 10\n  };\n\n  var createPosterView = function createPosterView(_) {\n    return _.utils.createView({\n      name: 'file-poster',\n      tag: 'div',\n      ignoreRect: true,\n      create: function create(_ref) {\n        var root = _ref.root;\n        root.ref.image = document.createElement('img');\n        root.element.appendChild(root.ref.image);\n      },\n      write: _.utils.createRoute({\n        DID_FILE_POSTER_LOAD: function DID_FILE_POSTER_LOAD(_ref2) {\n          var root = _ref2.root,\n              props = _ref2.props;\n          var id = props.id; // get item\n\n          var item = root.query('GET_ITEM', {\n            id: props.id\n          });\n          if (!item) return; // get poster\n\n          var poster = item.getMetadata('poster');\n          root.ref.image.src = poster; // let others know of our fabulous achievement (so the image can be faded in)\n\n          root.dispatch('DID_FILE_POSTER_DRAW', {\n            id: id\n          });\n        }\n      }),\n      mixins: {\n        styles: ['scaleX', 'scaleY', 'opacity'],\n        animations: {\n          scaleX: IMAGE_SCALE_SPRING_PROPS,\n          scaleY: IMAGE_SCALE_SPRING_PROPS,\n          opacity: {\n            type: 'tween',\n            duration: 750\n          }\n        }\n      }\n    });\n  };\n\n  var applyTemplate = function applyTemplate(source, target) {\n    // copy width and height\n    target.width = source.width;\n    target.height = source.height; // draw the template\n\n    var ctx = target.getContext('2d');\n    ctx.drawImage(source, 0, 0);\n  };\n\n  var createPosterOverlayView = function createPosterOverlayView(fpAPI) {\n    return fpAPI.utils.createView({\n      name: 'file-poster-overlay',\n      tag: 'canvas',\n      ignoreRect: true,\n      create: function create(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        applyTemplate(props.template, root.element);\n      },\n      mixins: {\n        styles: ['opacity'],\n        animations: {\n          opacity: {\n            type: 'spring',\n            mass: 25\n          }\n        }\n      }\n    });\n  };\n\n  var getImageSize = function getImageSize(url, cb) {\n    var image = new Image();\n\n    image.onload = function () {\n      var width = image.naturalWidth;\n      var height = image.naturalHeight;\n      image = null;\n      cb(width, height);\n    };\n\n    image.src = url;\n  };\n\n  var easeInOutSine = function easeInOutSine(t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n  };\n\n  var addGradientSteps = function addGradientSteps(gradient, color) {\n    var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var easeFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : easeInOutSine;\n    var steps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 10;\n    var offset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    var range = 1 - offset;\n    var rgb = color.join(',');\n\n    for (var i = 0; i <= steps; i++) {\n      var p = i / steps;\n      var stop = offset + range * p;\n      gradient.addColorStop(stop, 'rgba('.concat(rgb, ', ').concat(easeFn(p) * alpha, ')'));\n    }\n  };\n\n  var MAX_WIDTH = 10;\n  var MAX_HEIGHT = 10;\n\n  var calculateAverageColor = function calculateAverageColor(image) {\n    var scalar = Math.min(MAX_WIDTH / image.width, MAX_HEIGHT / image.height);\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    var width = canvas.width = Math.ceil(image.width * scalar);\n    var height = canvas.height = Math.ceil(image.height * scalar);\n    ctx.drawImage(image, 0, 0, width, height);\n    var data = null;\n\n    try {\n      data = ctx.getImageData(0, 0, width, height).data;\n    } catch (e) {\n      return null;\n    }\n\n    var l = data.length;\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    var i = 0;\n\n    for (; i < l; i += 4) {\n      r += data[i] * data[i];\n      g += data[i + 1] * data[i + 1];\n      b += data[i + 2] * data[i + 2];\n    }\n\n    r = averageColor(r, l);\n    g = averageColor(g, l);\n    b = averageColor(b, l);\n    return {\n      r: r,\n      g: g,\n      b: b\n    };\n  };\n\n  var averageColor = function averageColor(c, l) {\n    return Math.floor(Math.sqrt(c / (l / 4)));\n  };\n\n  var drawTemplate = function drawTemplate(canvas, width, height, color, alphaTarget) {\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n    var horizontalCenter = width * 0.5;\n    var grad = ctx.createRadialGradient(horizontalCenter, height + 110, height - 100, horizontalCenter, height + 110, height + 100);\n    addGradientSteps(grad, color, alphaTarget, undefined, 8, 0.4);\n    ctx.save();\n    ctx.translate(-width * 0.5, 0);\n    ctx.scale(2, 1);\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, width, height);\n    ctx.restore();\n  };\n\n  var hasNavigator = typeof navigator !== 'undefined';\n  var width = 500;\n  var height = 200;\n  var overlayTemplateShadow = hasNavigator && document.createElement('canvas');\n  var overlayTemplateError = hasNavigator && document.createElement('canvas');\n  var overlayTemplateSuccess = hasNavigator && document.createElement('canvas');\n  var itemShadowColor = [40, 40, 40];\n  var itemErrorColor = [196, 78, 71];\n  var itemSuccessColor = [54, 151, 99];\n\n  if (hasNavigator) {\n    drawTemplate(overlayTemplateShadow, width, height, itemShadowColor, 0.85);\n    drawTemplate(overlayTemplateError, width, height, itemErrorColor, 1);\n    drawTemplate(overlayTemplateSuccess, width, height, itemSuccessColor, 1);\n  }\n\n  var loadImage = function loadImage(url, crossOriginValue) {\n    return new Promise(function (resolve, reject) {\n      var img = new Image();\n\n      if (typeof crossOrigin === 'string') {\n        img.crossOrigin = crossOriginValue;\n      }\n\n      img.onload = function () {\n        resolve(img);\n      };\n\n      img.onerror = function (e) {\n        reject(e);\n      };\n\n      img.src = url;\n    });\n  };\n\n  var createPosterWrapperView = function createPosterWrapperView(_) {\n    // create overlay view\n    var overlay = createPosterOverlayView(_);\n    /**\n     * Write handler for when preview container has been created\n     */\n\n    var didCreatePreviewContainer = function didCreatePreviewContainer(_ref) {\n      var root = _ref.root,\n          props = _ref.props;\n      var id = props.id; // we need to get the file data to determine the eventual image size\n\n      var item = root.query('GET_ITEM', id);\n      if (!item) return; // get url to file\n\n      var fileURL = item.getMetadata('poster'); // image is now ready\n\n      var previewImageLoaded = function previewImageLoaded(data) {\n        // calculate average image color, is in try catch to circumvent any cors errors\n        var averageColor = root.query('GET_FILE_POSTER_CALCULATE_AVERAGE_IMAGE_COLOR') ? calculateAverageColor(data) : null;\n        item.setMetadata('color', averageColor, true); // the preview is now ready to be drawn\n\n        root.dispatch('DID_FILE_POSTER_LOAD', {\n          id: id,\n          data: data\n        });\n      }; // determine image size of this item\n\n\n      getImageSize(fileURL, function (width, height) {\n        // we can now scale the panel to the final size\n        root.dispatch('DID_FILE_POSTER_CALCULATE_SIZE', {\n          id: id,\n          width: width,\n          height: height\n        }); // create fallback preview\n\n        loadImage(fileURL, root.query('GET_FILE_POSTER_CROSS_ORIGIN_ATTRIBUTE_VALUE')).then(previewImageLoaded);\n      });\n    };\n    /**\n     * Write handler for when the preview has been loaded\n     */\n\n\n    var didLoadPreview = function didLoadPreview(_ref2) {\n      var root = _ref2.root;\n      root.ref.overlayShadow.opacity = 1;\n    };\n    /**\n     * Write handler for when the preview image is ready to be animated\n     */\n\n\n    var didDrawPreview = function didDrawPreview(_ref3) {\n      var root = _ref3.root;\n      var image = root.ref.image; // reveal image\n\n      image.scaleX = 1.0;\n      image.scaleY = 1.0;\n      image.opacity = 1;\n    };\n    /**\n     * Write handler for when the preview has been loaded\n     */\n\n\n    var restoreOverlay = function restoreOverlay(_ref4) {\n      var root = _ref4.root;\n      root.ref.overlayShadow.opacity = 1;\n      root.ref.overlayError.opacity = 0;\n      root.ref.overlaySuccess.opacity = 0;\n    };\n\n    var didThrowError = function didThrowError(_ref5) {\n      var root = _ref5.root;\n      root.ref.overlayShadow.opacity = 0.25;\n      root.ref.overlayError.opacity = 1;\n    };\n\n    var didCompleteProcessing = function didCompleteProcessing(_ref6) {\n      var root = _ref6.root;\n      root.ref.overlayShadow.opacity = 0.25;\n      root.ref.overlaySuccess.opacity = 1;\n    };\n    /**\n     * Constructor\n     */\n\n\n    var create = function create(_ref7) {\n      var root = _ref7.root,\n          props = _ref7.props; // test if colors aren't default item overlay colors\n\n      var itemShadowColorProp = root.query('GET_FILE_POSTER_ITEM_OVERLAY_SHADOW_COLOR');\n      var itemErrorColorProp = root.query('GET_FILE_POSTER_ITEM_OVERLAY_ERROR_COLOR');\n      var itemSuccessColorProp = root.query('GET_FILE_POSTER_ITEM_OVERLAY_SUCCESS_COLOR');\n\n      if (itemShadowColorProp && itemShadowColorProp !== itemShadowColor) {\n        itemShadowColor = itemShadowColorProp;\n        drawTemplate(overlayTemplateShadow, width, height, itemShadowColor, 0.85);\n      }\n\n      if (itemErrorColorProp && itemErrorColorProp !== itemErrorColor) {\n        itemErrorColor = itemErrorColorProp;\n        drawTemplate(overlayTemplateError, width, height, itemErrorColor, 1);\n      }\n\n      if (itemSuccessColorProp && itemSuccessColorProp !== itemSuccessColor) {\n        itemSuccessColor = itemSuccessColorProp;\n        drawTemplate(overlayTemplateSuccess, width, height, itemSuccessColor, 1);\n      } // image view\n\n\n      var image = createPosterView(_); // append image presenter\n\n      root.ref.image = root.appendChildView(root.createChildView(image, {\n        id: props.id,\n        scaleX: 1.25,\n        scaleY: 1.25,\n        opacity: 0\n      })); // image overlays\n\n      root.ref.overlayShadow = root.appendChildView(root.createChildView(overlay, {\n        template: overlayTemplateShadow,\n        opacity: 0\n      }));\n      root.ref.overlaySuccess = root.appendChildView(root.createChildView(overlay, {\n        template: overlayTemplateSuccess,\n        opacity: 0\n      }));\n      root.ref.overlayError = root.appendChildView(root.createChildView(overlay, {\n        template: overlayTemplateError,\n        opacity: 0\n      }));\n    };\n\n    return _.utils.createView({\n      name: 'file-poster-wrapper',\n      create: create,\n      write: _.utils.createRoute({\n        // image preview stated\n        DID_FILE_POSTER_LOAD: didLoadPreview,\n        DID_FILE_POSTER_DRAW: didDrawPreview,\n        DID_FILE_POSTER_CONTAINER_CREATE: didCreatePreviewContainer,\n        // file states\n        DID_THROW_ITEM_LOAD_ERROR: didThrowError,\n        DID_THROW_ITEM_PROCESSING_ERROR: didThrowError,\n        DID_THROW_ITEM_INVALID: didThrowError,\n        DID_COMPLETE_ITEM_PROCESSING: didCompleteProcessing,\n        DID_START_ITEM_PROCESSING: restoreOverlay,\n        DID_REVERT_ITEM_PROCESSING: restoreOverlay\n      })\n    });\n  };\n  /**\n   * File Poster Plugin\n   */\n\n\n  var plugin = function plugin(fpAPI) {\n    var addFilter = fpAPI.addFilter,\n        utils = fpAPI.utils;\n    var Type = utils.Type,\n        createRoute = utils.createRoute; // filePosterView\n\n    var filePosterView = createPosterWrapperView(fpAPI); // called for each view that is created right after the 'create' method\n\n    addFilter('CREATE_VIEW', function (viewAPI) {\n      // get reference to created view\n      var is = viewAPI.is,\n          view = viewAPI.view,\n          query = viewAPI.query; // only hook up to item view and only if is enabled for this cropper\n\n      if (!is('file') || !query('GET_ALLOW_FILE_POSTER')) return; // create the file poster plugin, but only do so if the item is an image\n\n      var didLoadItem = function didLoadItem(_ref) {\n        var root = _ref.root,\n            props = _ref.props;\n        updateItemPoster(root, props);\n      };\n\n      var didUpdateItemMetadata = function didUpdateItemMetadata(_ref2) {\n        var root = _ref2.root,\n            props = _ref2.props,\n            action = _ref2.action;\n        if (!/poster/.test(action.change.key)) return;\n        updateItemPoster(root, props);\n      };\n\n      var updateItemPoster = function updateItemPoster(root, props) {\n        var id = props.id;\n        var item = query('GET_ITEM', id); // item could theoretically have been removed in the mean time\n\n        if (!item || !item.getMetadata('poster') || item.archived) return; // don't update if is the same poster\n\n        if (root.ref.previousPoster === item.getMetadata('poster')) return;\n        root.ref.previousPoster = item.getMetadata('poster'); // test if is filtered\n\n        if (!query('GET_FILE_POSTER_FILTER_ITEM')(item)) return;\n\n        if (root.ref.filePoster) {\n          view.removeChildView(root.ref.filePoster);\n        } // set preview view\n\n\n        root.ref.filePoster = view.appendChildView(view.createChildView(filePosterView, {\n          id: id\n        })); // now ready\n\n        root.dispatch('DID_FILE_POSTER_CONTAINER_CREATE', {\n          id: id\n        });\n      };\n\n      var didCalculatePreviewSize = function didCalculatePreviewSize(_ref3) {\n        var root = _ref3.root,\n            action = _ref3.action; // no poster set\n\n        if (!root.ref.filePoster) return; // remember dimensions\n\n        root.ref.imageWidth = action.width;\n        root.ref.imageHeight = action.height;\n        root.ref.shouldUpdatePanelHeight = true;\n        root.dispatch('KICK');\n      };\n\n      var getPosterHeight = function getPosterHeight(_ref4) {\n        var root = _ref4.root;\n        var fixedPosterHeight = root.query('GET_FILE_POSTER_HEIGHT'); // if fixed height: return fixed immediately\n\n        if (fixedPosterHeight) {\n          return fixedPosterHeight;\n        }\n\n        var minPosterHeight = root.query('GET_FILE_POSTER_MIN_HEIGHT');\n        var maxPosterHeight = root.query('GET_FILE_POSTER_MAX_HEIGHT'); // if natural height is smaller than minHeight: return min height\n\n        if (minPosterHeight && root.ref.imageHeight < minPosterHeight) {\n          return minPosterHeight;\n        }\n\n        var height = root.rect.element.width * (root.ref.imageHeight / root.ref.imageWidth);\n\n        if (minPosterHeight && height < minPosterHeight) {\n          return minPosterHeight;\n        }\n\n        if (maxPosterHeight && height > maxPosterHeight) {\n          return maxPosterHeight;\n        }\n\n        return height;\n      }; // start writing\n\n\n      view.registerWriter(createRoute({\n        DID_LOAD_ITEM: didLoadItem,\n        DID_FILE_POSTER_CALCULATE_SIZE: didCalculatePreviewSize,\n        DID_UPDATE_ITEM_METADATA: didUpdateItemMetadata\n      }, function (_ref5) {\n        var root = _ref5.root,\n            props = _ref5.props; // don't run without poster\n\n        if (!root.ref.filePoster) return; // don't do anything while hidden\n\n        if (root.rect.element.hidden) return; // should we redraw\n\n        if (root.ref.shouldUpdatePanelHeight) {\n          // time to resize the parent panel\n          root.dispatch('DID_UPDATE_PANEL_HEIGHT', {\n            id: props.id,\n            height: getPosterHeight({\n              root: root\n            })\n          }); // done!\n\n          root.ref.shouldUpdatePanelHeight = false;\n        }\n      }));\n    }); // expose plugin\n\n    return {\n      options: {\n        // Enable or disable file poster\n        allowFilePoster: [true, Type.BOOLEAN],\n        // Fixed preview height\n        filePosterHeight: [null, Type.INT],\n        // Min image height\n        filePosterMinHeight: [null, Type.INT],\n        // Max image height\n        filePosterMaxHeight: [null, Type.INT],\n        // filters file items to determine which are shown as poster\n        filePosterFilterItem: [function () {\n          return true;\n        }, Type.FUNCTION],\n        // Enables or disables reading average image color\n        filePosterCalculateAverageImageColor: [false, Type.BOOLEAN],\n        // Allows setting the value of the CORS attribute (null is don't set attribute)\n        filePosterCrossOriginAttributeValue: ['Anonymous', Type.STRING],\n        // Colors used for item overlay gradient\n        filePosterItemOverlayShadowColor: [null, Type.ARRAY],\n        filePosterItemOverlayErrorColor: [null, Type.ARRAY],\n        filePosterItemOverlaySuccessColor: [null, Type.ARRAY]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":null,"metadata":{},"sourceType":"module"}